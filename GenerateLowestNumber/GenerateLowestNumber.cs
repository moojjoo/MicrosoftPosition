using System;

// Thank you this was a very challaging algorithm to figure out...  Applaud you on this question.  RBD

//You are tasked with implementing a method that returns the lowest possible 
//number that could be generated after removing n characters from a string of digits.
//The method signature should look like:

//public static string GenerateLowestNumber(string number, int n)

//Where the number parameter is a string that contains a number(e.g. “4205123”), and 
//the n parameter represents the number of characters to remove from the string. 
//The goal of this method is to return the lowest number that can be generated by 
//removing n characters from the number provided while keeping the positions of 
//the remaining characters relative to each other the same (i.e.the method should 
//remove n characters from the string, but it cannot re-order the characters).
//For example, if number is “4205123” and n is 4, the lowest possible number that 
//can be generated after removing any 4 characters is “012”. If number is “216504” 
//and n is 3, the lowest possible number that can be generated after removing 3 characters is “104”.


namespace GenerateLowestNumber
{
    class GenerateLowestNumberQuestion
    {
        static void Main(string[] args)
        {
            string number = "78734";
            int n = 3;
            if (number.Length == 0)
            {
                Console.WriteLine("String Number cannot be empty");
            }
            else
            {
                Console.WriteLine(GenerateLowestNumber(number, n));
            }
        }

        // method to find the smallest number based on number and digits requested
        public static string GenerateLowestNumber(string number, int n)        
        {
            int intNum = int.Parse(number);

            // initialize frequency of  
            // each digit to Zero 
            int[] freq = new int[10];

            // count frequency of each  
            // digit in the number 
            while (intNum > 0)
            {
                // extract last digit 
                int d = intNum % 10;

                // increment counting 
                freq[d]++;

                //remove last digit 
                intNum = intNum / 10;
            }

            // Set the LEFTMOST digit to  
            // minimum expect 0 
            int result = 0;
            for (int i = 1; i <= 9; i++)
            {
                if (freq[i] != 0)
                {
                    result = i;
                    freq[i]--;
                    break;
                }
            }

            // arrange all remaining digits 
            // in ascending order 
            for (int i = 0; i <= 9; i++)
                while (freq[i]-- != 0)
                    result = result * 10 + i;


            // Return the substring from the arranged numbers
            string strResult = result.ToString();
            strResult = strResult.Substring(0, n);            

            return strResult;
        }
    }
}

